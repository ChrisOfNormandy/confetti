@use 'sass:map';
@use 'sass:color';
@use '../functions/color' as *;
@use '../variables' as *;

/**
 * name  : The name of a background style to define.
 * value : The color value to map to the provided name.
 */
@mixin background-var($name, $value) {
    $backgrounds: map-merge($backgrounds, ($name: $value)) !global;

    @debug 'Add #{$name} to backgrounds using #{$value}.';
}

/**
 * name  : The name of a font color style to define.
 * value : The color value to map to the provided name.
 */
@mixin color-var($name, $value) {
    $colors: map-merge($backgrounds, ($name: $value)) !global;

    @debug 'Add #{$name} to colors using #{$value}.';
}

/**
 * name      : The name of a scheme to define.
 * value     : The color value to map to the provided name.
 * withColor : Include a 
 */
@mixin scheme-var($name, $value, $withColor: 0) {
    $inv: color.invert($value);
    $com: compliment($value);

    @include background-var($name, $value);
    @include border-var($name, $inv);
    @include shadow-var($name, $com, 2px, 2px, 2px);

    @if $withColor !=0 {
        @include color-var($name, $value)
    }
}

/**
 * name      :
 * value     :
 * withColor :
 * tinted    :
 */
@mixin interface-scheme-var($name, $value, $withColor: 0, $tinted: 1) {
    @include scheme-var($name, $value, $withColor);

    $hoverValue: $value;
    $disabledValue: $value;
    $disabledHoverValue: $value;

    @if $tinted !=0 {
        @if useBlackFont($value) {
            $hoverValue: monochrome($value, -0.2);
            $disabledValue: monochrome($value, -0.3);
            $disabledHoverValue: monochrome($value, -0.4);
        }

        @else {
            $hoverValue: monochrome($value, 0.2);
            $disabledValue: monochrome($value, 0.3);
            $disabledHoverValue: monochrome($value, 0.4);
        }
    }

    @include background-var('#{$name}:hover', $hoverValue);
    @include background-var('#{$name}:disabled', $disabledValue);
    @include background-var('#{$name}:disabled:hover', $disabledHoverValue);
}

/**
 * name  :
 * color :
 * x     :
 * y     :
 * fade  :
 */
@mixin shadow-var($name, $color, $x: 2px, $y: 2px, $fade: 2px) {
    $shadows: map-merge($backgrounds, ($name: $color $x $y $fade)) !global;

    @debug 'Add #{$name} to shadows using #{$color} #{$x} #{$y} #{$fade}.';
}

@mixin border-var($name, $stroke, $thickness: 1px, $style: solid) {
    $borders: map-merge($backgrounds, ($name: $thickness $style $stroke)) !global;

    @debug 'Add #{$name} to borders using #{$thickness} #{$style} #{$stroke}.';
}

// 

/**
 *
 */
@mixin themed($theme) {
    .theme {
        &.#{$theme} {
            @content;
        }
    }
}

/**
 *
 */
@mixin define-theme($theme) {
    .theme {
        &.#{$theme} {
            @content;
        }
    }
}