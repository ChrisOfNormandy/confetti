@use 'sass:map';
@use 'sass:color';

@import 'palettes/indian_red';
@import 'palettes/mindaro';
@import 'palettes/navy';
@import 'palettes/pink';
@import 'palettes/rust';
@import 'palettes/syracuse';
@import 'palettes/tea_green';
@import 'palettes/tomato';

$palettes: (
    'indian_red': $indian_red_map,
    'mindaro':$mindaro_map,
    'navy':$navy_map,
    'pink':$pink_map,
    'rust':$rust_map,
    'syracuse':$syracuse_map,
    'tea_green':$tea_green_map,
    'tomato':$tomato_map
);

/**
 * palette :
 * n       :
 */
@function palette($palette, $n) {
    @return map.get(map.get($palettes, $palette), $n);
}

/**
 * palette :
 * n       :
 */
@function palette-inverse($palette, $n) {
    $clr: palette($palette, $n);

    @return color.invert($clr);
}

/**
 * palette :
 * n       :
 */
@function palette-compliment($palette, $n) {
    @return compliment(palette($palette, $n));
}

//

/**
 * palette :
 * name    :
 * color   :
 */
@function append-palette($palette, $name, $color) {
    @debug 'Add #{$name}:#{$color} to palette #{$palette}.';

    $palettes: map.merge(map.get($palettes, $palette), ($name, $color)) !global;

    @return $palettes;
}

/**
 * name   :
 * colors :
 */
@mixin def-palette($name, $colors...) {
    $i: 0;

    $new_palette: ();

    @each $color in $colors {
        $new_palette: map.merge($new_palette, ($i: $color));

        $i: $i + 1;
    }

    $palettes: map.merge($palettes, ($name: $new_palette)) !global;
}