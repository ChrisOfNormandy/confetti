@use 'sass:map';
@use 'sass:color';

@use 'palettes/indian';
@use 'palettes/mindaro';
@use 'palettes/navy';
@use 'palettes/pink';
@use 'palettes/rust';
@use 'palettes/syracuse';
@use 'palettes/tea';
@use 'palettes/tomato';

$palettes: (
    'indian_red': indian.$color_map,
    'mindaro': mindaro.$color_map,
    'navy': navy.$color_map,
    'pink' pink.$color_map,
    'rust': rust.$color_map,
    'syracuse': syracuse.$color_map,
    'tea_green': tea.$color_map,
    'tomato': tomato.$color_map
);

/**
 * palette :
 * n       :
 */
@function palette($palette, $n) {
    @return map.get(map.get($palettes, $palette), $n);
}

/**
 * palette :
 * n       :
 */
@function palette-inverse($palette, $n) {
    $clr: palette($palette, $n);

    @return color.invert($clr);
}

/**
 * palette :
 * n       :
 */
@function palette-compliment($palette, $n) {
    @return compliment(palette($palette, $n));
}

//

/**
 * palette :
 * name    :
 * color   :
 */
@function append-palette($palette, $name, $color) {
    @debug 'Add #{$name}:#{$color} to palette #{$palette}.';

    $palettes: map.merge(map.get($palettes, $palette), ($name, $color)) !global;

    @return $palettes;
}

/**
 * name   :
 * colors :
 */
@mixin def-palette($name, $colors...) {
    $i: 0;

    $new_palette: (
    );

@each $color in $colors {
    $new_palette: map.merge($new_palette, ($i: $color));

    $i: $i + 1;
}

$palettes: map.merge($palettes, ($name: $new_palette)) !global;
}