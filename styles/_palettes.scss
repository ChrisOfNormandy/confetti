@use 'sass:map';
@use 'sass:color';
@use './functions/color' as *;
@use './mixins/cursors' as *;

@use 'palettes/india' as p_india;
@use 'palettes/mindaro' as p_mindaro;
@use 'palettes/navy' as p_navy;
@use 'palettes/pink' as p_pink;
@use 'palettes/rust' as p_rust;
@use 'palettes/syracuse' as p_syracuse;
@use 'palettes/tea' as p_tea;
@use 'palettes/tomato' as p_tomato;

$palettes: (
    'india_red': p_india.$palette,
    'mindaro': p_mindaro.$palette,
    'navy': p_navy.$palette,
    'pink': p_pink.$palette,
    'rust': p_rust.$palette,
    'syracuse': p_syracuse.$palette,
    'tea_green': p_tea.$palette,
    'tomato': p_tomato.$palette
);

/**
 * palette :
 * n       :
 */
@function palette($palette, $n) {
    @return map.get(map.get($palettes, $palette), $n);
}

/**
 * palette :
 * n       :
 */
@function palette-inverse($palette, $n) {
    $clr: palette($palette, $n);

    @return color.invert($clr);
}

/**
 * palette :
 * n       :
 */
@function palette-compliment($palette, $n) {
    @return compliment(palette($palette, $n));
}

//

/**
 * palette :
 * name    :
 * color   :
 */
@function append-palette($palette, $name, $color) {
    @debug 'Add #{$name}:#{$color} to palette #{$palette}.';

    $palettes: map.merge(map.get($palettes, $palette), ($name, $color)) !global;

    @return $palettes;
}