@use 'sass:math';
@use 'sass:color';

$red_threshold: 0.299;
$green_threshold: 0.587;
$blue_threshold: 0.114;
$font_threshold: 186;

@function colorChannel($color, $channel) {
    @return color.channel($color, $channel, rgb);
}

/**
 * hexColor : Some hex color like #ff0000, which gets converted to rgb
 *          : and complimented to rgb(0, 255, 255).
 */
@function compliment($hexColor) {
    @if $hexColor ==null or $hexColor ==none {
        @return rgb(0, 0, 0);
    }

    $a: colorChannel($hexColor, "red");
    $b: colorChannel($hexColor, "green");
    $c: colorChannel($hexColor, "blue");

    $max: math.max($a, $b, $c);
    $min: math.min($a, $b, $c);
    $sum: $max + $min;

    $r: $sum - $a;
    $g: $sum - $b;
    $b: $sum - $c;

    @return rgb($r, $g, $b);
}

/**
 * color : Any color like #ff0000 or rgb(255, 0, 0).
 */
@function useBlackFont($color) {
    @if $color ==null or $color ==none {
        @return true;
    }

    $r: colorChannel($color, "red");
    $g: colorChannel($color, "green");
    $b: colorChannel($color, "blue");

    @return ($r*$red_threshold + $g*$green_threshold + $b*$blue_threshold)>$font_threshold;
}

/**
 * color : Any color like #ff0000 or rgb(255, 0, 0).
 */
@function color-for-background($color) {
    @if useBlackFont($color) {
        @return #000;
    }

    @return #fff;
}

/**
 * color  : Any color like #ff0000 or rgb(255, 0, 0).
 * amount : The amount of monochrome shift in a positive or negative direction.
 *        : A positive value between >0 and 1 shifts toward `white`.
 *        : A negative value between <0 and -1 shifts toward `black`.
 *        : A value of 0 returns the color provided.
 */
@function monochrome($color, $amount) {
    @if $color ==null {
        @return rgb(0, 0, 0);
    }

    @if $amount ==0 {
        @return $color;
    }

    $r: colorChannel($color, "red");
    $g: colorChannel($color, "green");
    $b: colorChannel($color, "blue");

    @if $amount >0 {
        $x: 255 - $r;
        $y: 255 - $g;
        $z: 255 - $b;

        @return rgb($r + $x * $amount, $g + $y * $amount, $b + $z * $amount);
    }

    @return rgb($r + $r * $amount, $g + $g * $amount, $b + $b * $amount);
}